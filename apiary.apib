FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Movie-API

The Movie API offers sharing and displaying of video materials in a structured environment and the ability to create and distribute text based reviews and comments connected to the video materials. Video resources can be fetched using the API. Text based reviews and comments can be created by users with credentials, which are structured around video materials.

Clients using this service can use the API to fetch video related information such as reviews of the whole video, opinions (user comments) on certain parts of the video and trailers. This information could be used for journalism purposes. The API can be easily modified to curate different types of video content in different types of setting, including recorded academic lectures and public information distribution.

# Group User
## Profile

### Description
User model containing user profile information.

### Related Profiles
 - *Group*
 - *Review*
 - *Comment*
 - *Actor*

### Link relations
 - **groups**: List of all the groups this user belongs to. Each item is an instance of the type Group defined in the Group Profile. Can be accessed by GET.
 - **reviews**: List of all the reviews made by this user. Each item is an instance of the type Review defined in the Review Profile. Can be accessed by GET. POST only for authenticated user using csrftoken.
 - **comments**: List of all the comments made by this user. Each item is an instance of the type Comment defined in the Comment Profile. Can be accessed by GET. POST only for authenticated user using csrftoken.
 - **actors**: List of all the actors made by this user. Each item is an instance of the type Actor defined in the Actor Profile. Can be accessed by GET. POST only for authenticated user using csrftoken.

### Semantic descriptors
 - **username**: STRING. User's username.
 - **email**: STRING. User's email address.

## User [/users/{id}]
A single user containing all its information.

+ Parameters
    + id (integer) ... the id of the user.

+ Model (application/hal+json)

    + Body
    
            {
                "_links": {
                    "self": {
                        "href": "/users/1"
                    },
                    "groups": {
                        "href": "/users/1/groups"
                    },
                    "reviews": {
                        "href": "/users/1/reviews"
                    },
                    "comments": {
                        "href": "/users/1/comments"
                    },
                    "actors": {
                        "href": "/users/1/actors"
                    }
                },
                "username": "admin",
                "email": "admin@test.com"
            }
            
    + Headers
    
            X-CSRFTOKEN: [csrftoken]

### Get a single user [GET] 
Get the information of a certain user, such as the reviews and comments the user has created.

+ Response 200

    [User][]
    
### Modify User [PUT]
Modify user information. Only admin user can modify user information. Only username and email address can be modified.
If the user is not authorized API returns a 401.

+ Request (application/json)

        {
            "username": "admin",
            "email": "adminMODIFIED@test.com"
        }

+ Response 200

    [User][]
            
+ Response 404 (application/json)

+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }
        
### Delete an User [DELETE]
Delete an user. If the user doesn't exist the API returns a 404 and if the user is not authorized it returns a 401.

 + Request (application/json)
                
 + Response 204 (application/json)

 + Response 401 (application/json)

        {
            "error":"Unauthorized."
        }
        
 + Response 404 (application/json)

## Users [/users]

### Get all Users [GET]

Get list of all created users containing their data.

+ Response 200 (application/hal+json)

        {
            "_links": {
                "self": {
                    "href": "/users"
                }
            },
            "count": 1,
            "_embedded": {
                "user": [
                    {
                        "_links": {
                            "self": {
                                "href": "/users/1"
                            },
                            "groups": {
                                "href": "/users/1/groups"
                            },
                            "reviews": {
                                "href": "/users/1/reviews"
                            },
                            "comments": {
                                "href": "/users/1/comments"
                            },
                            "actors": {
                                "href": "/users/1/actors"
                            }
                        },
                        "username": "admin",
                        "email": "admin@test.com"
                    }
                ]
            }
        }

### Create a new User [POST]

You may create your own user using this action. It takes a JSON
object containing a username, email-address and a optional collection of groups user belongs to.

+ Request (application/json)

        {
            "username": "adminNEW",
            "email": "adminNEW@test.com"
        }

+ Response 201 (application/json)

        {
          "success": "The request has been fulfilled and has resulted in one or more new resources being created."
        }
            
+ Response 500 (application/json)

        {
          "error": "Item already exists."
        }
        
+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }

# Group Group
## Profile

### Description
Group model containing group profile information. Not fully implemented.

### Related Profiles
 - *User*

### Link relations
 - **users**: List of all the users that belong to this group. Each item is an instance of the type User defined in the User Profile. Can be accessed by GET. POST only for authenticated admin-user using csrftoken.

### Semantic descriptors
 - **name**: STRING. Name of the group.
 - **isAdmin**: INTEGER. 0 or 1 to determine if the group is an admin-group.

## Group [/groups/{id}]
A single group containing all its information.

+ Parameters
    + id (integer) ... the id of the group.

+ Model (application/hal+json)

    + Body
    
            {
                "_links": {
                    "self": {
                        "href": "/groups/1"
                    },
                    "users": {
                        "href": "/groups/1/users"
                    }
                },
                "name": "admin-group",
                "isAdmin": 1
            }
            
    + Headers

            X-CSRFTOKEN: [csrftoken]

### Get a single group [GET] 
Get the information of a certain group, such as it's name, admin status and list of users that belong to it.

+ Response 200

    [Group][]
    
### Modify Group [PUT]
Modify group information. Only admin user can modify group information. Only name and isAdmin can be modified.
If the user is not authorized API returns a 401.

+ Request (application/json)

        {
            "name": "admin-group",
            "isAdmin": 1
        }

+ Response 200 (application/json)

        {
          "success": "The request has succeeded."
        }
            
+ Response 404 (application/json)

+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }

### Delete a Group [DELETE]
Delete a group. If the group doesn't exist the API returns a 404 and if the user is not authorized it returns a 401.

 + Request (application/json)
                
 + Response 204 (application/json)

 + Response 401 (application/json)

        {
            "error":"Unauthorized."
        }
        
 + Response 404 (application/json)

## Groups [/groups]

### Get all Groups [GET]

Get list of all created groups containing their data.

+ Response 200 (application/hal+json)

        {
            "_links": {
                "self": {
                    "href": "/groups"
                }
            },
            "count": 1,
            "_embedded": {
                "group": [
                    {
                        "_links": {
                            "self": {
                                "href": "/groups/1"
                            },
                            "users": {
                                "href": "/groups/1/users"
                            }
                        },
                        "name": "admin-group",
                        "isAdmin": 1
                    }
                ]
            }
        }

### Create a new Group [POST]

You may create your own group using this action. It takes a JSON
object containing a name, admin-status and a optional collection of users that belong to this group.

+ Request (application/json)

        {
            "name": "admin-group",
            "isAdmin": 1
        }

+ Response 201 (application/json)

        {
          "success": "The request has been fulfilled and has resulted in one or more new resources being created."
        }
            
+ Response 500 (application/json)

        {
          "error": "Item already exists."
        }
        
+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }

# Group Movie
## Profile

### Description
Movie model containing movie profile information.

### Related Profiles
 - *Category*
 - *Actor*

### Link relations
 - **categories**: List of all the categories this movie belongs to. Each item is an instance of the type Category defined in the Category Profile. Can be accessed by GET. POST only for authenticated user using csrftoken.
 - **actors**: List of all the actors in this movie. Each item is an instance of the type Actor defined in the Actor Profile. Can be accessed by GET. POST only for authenticated user using csrftoken.

### Semantic descriptors
 - **title**: STRING. Movie's title.
 - **length**: STRING. Length of movie ("00:00:00").
 - **rating**: INTEGER. Movie's rating ranging from 1 to 5.

## Movie [/movies/{id}]
A single movie containing all its information.

+ Parameters
    + id (integer) ... the id of the movie.

+ Model (application/hal+json)

    + Body
    
            {
                "_links": {
                    "self": {
                        "href": "/movies/1"
                    },
                    "categories": {
                        "href": "/movies/1/categories"
                    },
                    "actors": {
                        "href": "/movies/1/actors"
                    }
                },
                "title": "Movie 1",
                "length": "01:34:56",
                "rating": 3
            }
            
    + Headers

            X-CSRFTOKEN: [csrftoken]

### Get a single movie [GET] 
Get the information of a certain movie, such as the title of the movie and it's length and rating.

+ Response 200

    [Movie][]
    
### Modify Movie [PUT]
Modify movie information. Only admin or original creator of the movie can modify it's information. Only title, length and rating can be modified.
If the user is not authorized API returns a 401.

+ Request (application/json)

        {
            "title": "Movie 1",
            "length": "01:34:56",
            "rating": 3
        }

+ Response 200 (application/json)

        {
          "success": "The request has succeeded."
        }
            
+ Response 404 (application/json)

+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }
        
### Delete a Movie [DELETE]
Delete a movie. If the movie doesn't exist the API returns a 404 and if the user is not authorized it returns a 401.

 + Request (application/json)
                
 + Response 204 (application/json)

 + Response 401 (application/json)

        {
            "error":"Unauthorized."
        }
        
 + Response 404 (application/json)

## Movies [/movies]

### Get all Movies [GET]

Get list of all created movies containing their data.

+ Response 200 (application/hal+json)

        {
            "_links": {
                "self": {
                    "href": "/movies"
                }
            },
            "count": 1,
            "_embedded": {
                "movie": [
                    {
                        "_links": {
                            "self": {
                                "href": "/movies/1"
                            },
                            "categories": {
                                "href": "/movies/1/categories"
                            },
                            "actors": {
                                "href": "/movies/1/actors"
                            }
                        },
                        "title": "Movie 1",
                        "length": "01:34:56",
                        "rating": 3
                    }
                ]
            }
        }

### Create a new Movie [POST]

You may create your own movie using this action. It takes a JSON
object containing a title, length, rating and a optional collection of categories this movie belongs to and a optional collection of actors that appear in this movie.

+ Request (application/json)

        {
            "title": "Movie 1",
            "length": "01:34:56",
            "rating": 3
        }

+ Response 201 (application/json)

        {
          "success": "The request has been fulfilled and has resulted in one or more new resources being created."
        }
            
+ Response 500 (application/json)

        {
          "error": "Item already exists."
        }
        
+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }
        

# Group Review
## Profile

### Description
Review model containing review profile information.

### Related Profiles
 - *User*
 - *Movie*

### Link relations
 - **author**: Link to the user who created this review. Item is an instance of the type User defined in the User Profile. Can be accessed by GET.
 - **movie**: Link to the movie this review belongs to. Item is an instance of the type Movie defined in the Movie Profile. Can be accessed by GET.

### Semantic descriptors
 - **text**: STRING. Content of the review.
 - **rating**: INTEGER. Rating associated with the review. Ranges from 1 to 5.

## Review [/movies/{movie_id}/reviews/{id}]
A single review for specific movie containing all its information.

+ Parameters
    + movie_id (integer) ... the id of the movie.
    + id (integer) ... the id of the review.

+ Model (application/hal+json)

    + Body
    
            {
                "_links": {
                    "self": {
                        "href": "/movies/1/reviews/1"
                    },
                    "author": {
                        "href": "/users/1"
                    },
                    "movie": {
                        "href": "/movies/1"
                    }
                },
                "text": "This is a review.",
                "rating": 4
            }
            
    + Headers

            X-CSRFTOKEN: [csrftoken]

### Get a single review [GET] 
Get the information of a certain review, such as the content of the review and the rating associated with it.

+ Response 200

    [Review][]
    
### Modify Review [PUT]
Modify review information. Only admin or original creator of the comment can modify it's information. Only text and rating can be modified.
If the user is not authorized API returns a 401.

+ Request (application/json)

        {
            "text": "This is a modified review.",
            "rating": 3
        }

+ Response 201 (application/json)

        {
          "success": "The request has succeeded."
        }
            
+ Response 404 (application/json)

+ Response 401 (application/json)
    
        {
          "error": "Unauthorized."
        }
        
### Delete a Review [DELETE]
Delete a review. If the review doesn't exist the API returns a 404 and if the user is not authorized it returns a 401.

 + Request (application/json)
                
 + Response 204 (application/json)

 + Response 401 (application/json)

        {
            "error":"Unauthorized."
        }
        
 + Response 404 (application/json)

## Reviews [/movies/{movie_id}/reviews]

+ Parameters
    + movie_id (integer) ... the id of the movie.

### Get all reviews [GET]

Get list of all created reviews containing their data for a specific movie.

+ Response 200 (application/hal+json)

        {
            "_links": {
                "movie": {
                    "href": "/movies/1"
                },
                "self": {
                    "href": "/movies/1/reviews"
                }
            },
            "count": 1,
            "_embedded": {
                "review": [
                    {
                        "_links": {
                            "self": {
                              "href": "/movies/1/reviews/1"
                            },
                            "author": {
                              "href": "/users/1"
                            },
                            "movie": {
                              "href": "/movies/1"
                            }
                        },
                        "text": "This is a review.",
                        "rating": 4
                    }
                ]
            }
        }

### Create a new Review [POST]

You may create your own review using this action. It takes a JSON
object containing text-content of the review, rating value from 1 to 5, user who created the review and the parent movie the review belongs to.

+ Request (application/json)

        {
            "text": "This is a review.",
            "rating": 4
        }

+ Response 201 (application/json)

        {
          "success": "The request has been fulfilled and has resulted in one or more new resources being created."
        }
            
+ Response 500 (application/json)

        {
          "error": "Item already exists."
        }
        
+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }

# Group Comment
## Profile

### Description
Comment model containing comment profile information.

### Related Profiles
 - *User*
 - *Movie*

### Link relations
 - **author**: Link to the user who created this comment. Item is an instance of the type User defined in the User Profile. Can be accessed by GET.
 - **movie**: Link to the movie this comment belongs to. Item is an instance of the type Movie defined in the Movie Profile. Can be accessed by GET.

### Semantic descriptors
 - **text**: STRING. Content of the comment.

## Comment [/movies/{movie_id}/comments/{id}]
A single comment for specific movie containing all its information.

+ Parameters
    + movie_id (integer) ... the id of the movie.
    + id (integer) ... the id of the comment.

+ Model (application/hal+json)

    + Body
    
            {
                "_links": {
                    "self": {
                      "href": "/movies/1/comments/1"
                    },
                    "author": {
                      "href": "/users/1"
                    },
                    "movie": {
                      "href": "/movies/1"
                    }
                },
                "text": "This is a comment."
            }
            
    + Headers

            X-CSRFTOKEN: [csrftoken]

### Get a single comment [GET] 
Get the information of a certain comment, such as the content of the comment and the rating associated with it.

+ Response 200

    [Comment][]
    
### Modify Comment [PUT]
Modify comment information. Only admin or original creator of the comment can modify it's information. Only text can be modified.
If the user is not authorized API returns a 401.

+ Request (application/json)

        {
            "text": "This is a modified comment.",
        }

+ Response 200 (application/json)

        {
          "success": "The request has succeeded."
        }
            
+ Response 404 (application/json)

+ Response 401 (application/json)
    
        {
          "error": "Unauthorized."
        }
        
### Delete a Comment [DELETE]
Delete a comment. If the comment doesn't exist the API returns a 404 and if the user is not authorized it returns a 401.

 + Request (application/json)
                
 + Response 204 (application/json)

 + Response 401 (application/json)

        {
            "error":"Unauthorized."
        }
        
 + Response 404 (application/json)

## Comments [/movies/{movie_id}/comments]

+ Parameters
    + movie_id (integer) ... the id of the movie.

### Get all comments [GET]

Get list of all created comments containing their data for a specific movie.

+ Response 200 (application/hal+json)

        {
            "_links": {
                "movie": {
                    "href": "/movies/1"
                },
                "self": {
                    "href": "/movies/1/comments"
                }
            },
            "count": 1,
            "_embedded": {
                "review": [
                    {
                        "_links": {
                            "self": {
                              "href": "/movies/1/comments/1"
                            },
                            "author": {
                              "href": "/users/1"
                            },
                            "movie": {
                              "href": "/movies/1"
                            }
                        },
                        "text": "This is a comment."
                    }
                ]
            }
        }

### Create a new Comment [POST]

You may create your own comment using this action. It takes a JSON
object containing text-content of the comment, user who created the comment and the parent movie the comment belongs to.

+ Request (application/json)

        {
            "text": "This is a comment."
        }

+ Response 201 (application/json)

        {
          "success": "The request has been fulfilled and has resulted in one or more new resources being created."
        }
            
+ Response 500 (application/json)

        {
          "error": "Item already exists."
        }
        
+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }

# Group Actor
## Profile

### Description
Actor model containing actor profile information.

### Related Profiles
 - *User*
 - *Movie*

### Link relations
 - **author**: Link to the user who created this actor. Item is an instance of the type User defined in the User Profile. Can be accessed by GET.
 - **movies**: List of the movies this actor belongs to. Each item is an instance of the type Movie defined in the Movie Profile. Can be accessed by GET. POST only for authenticated user using csrftoken.

### Semantic descriptors
 - **firstname**: STRING. First name of the actor.
 - **lastname**: STRING. Last name of the actor.

## Actor [/actors/{id}]
A single actor containing all its information.

+ Parameters
    + id (integer) ... the id of the actor.

+ Model (application/hal+json)

    + Body
    
            {
                "_links": {
                    "self": {
                      "href": "/actors/1"
                    },
                    "author": {
                      "href": "/users/1"
                    },
                    "movies": {
                      "href": "/actors/1/movies"
                    }
                },
                "firstname": "John",
                "lasttname": "Doe"
            }
            
    + Headers

            X-CSRFTOKEN: [csrftoken]

### Get a single actor [GET] 
Get the information of a certain actor, such as the first and last name of the actor and the movies he appears in.

+ Response 200

    [Actor][]
    
### Modify Actor [PUT]
Modify actor information. Only admin or original creator of the comment can modify it's information. Only names can be modified.
If the user is not authorized API returns a 401.

+ Request (application/json)

        {
            "firstname": "John",
            "lasttname": "Doe"
        }

+ Response 200 (application/json)

        {
          "success": "The request has been succeeded."
        }
            
+ Response 404 (application/json)

+ Response 401 (application/json)
    
        {
          "error": "Unauthorized."
        }
        
### Delete an Actor [DELETE]
Delete an Actor. If the actor doesn't exist the API returns a 404 and if the user is not authorized it returns a 401.

 + Request (application/json)
                
 + Response 204 (application/json)

 + Response 401 (application/json)

        {
            "error":"Unauthorized."
        }
        
 + Response 404 (application/json)

## Actors [/actors]

### Get all actors [GET]

Get list of all created actors containing their data.

+ Response 200 (application/hal+json)

        {
            "_links": {
                "self": {
                  "href": "/actors"
                }
            },
            "count": 1,
            "_embedded": {
                "actor": [
                    {
                        "_links": {
                            "self": {
                              "href": "/actors/1"
                            },
                            "author": {
                              "href": "/users/1"
                            },
                            "movies": {
                              "href": "/actors/1/movies"
                            }
                        },
                        "firstname": "John",
                        "lasttname": "Doe"
                    }
                ]
            }
        }

### Create a new Actor [POST]

You may create your own actor using this action. It takes a JSON
object containing the names of the actor and the user who created the actor and an optional list of movies the actor belongs to.

+ Request (application/json)

        {
            "firstname": "John",
            "lasttname": "Doe"
        }

+ Response 201 (application/json)

        {
          "success": "The request has been fulfilled and has resulted in one or more new resources being created."
        }
            
+ Response 500 (application/json)

        {
          "error": "Item already exists."
        }
        
+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }

# Group Category
## Profile

### Description
Category model containing category profile information.

### Related Profiles
 - *Movie*

### Link relations
 - **movies**: List of the movies this category appears in. List contains items of the type Movie defined in the Movie Profile. Can be accessed by GET. POST only for authenticated user using csrftoken.

### Semantic descriptors
 - **name**: STRING. Name of the category.

## Category [/categories/{id}]
A single category containing all its information.

+ Parameters
    + id (integer) ... the id of the category.

+ Model (application/hal+json)

    + Body
    
            {
                "_links": {
                    "self": {
                      "href": "/categories/1"
                    },
                    "movies": {
                      "href": "/categories/1/movies"
                    }
                },
                "name": "Horror"
            }
            
    + Headers

            X-CSRFTOKEN: [csrftoken]

### Get a single category [GET] 
Get the information of a certain category, such as the name of the category and the movies belonging to this category.

+ Response 200

    [Category][]
    
### Modify Category [PUT]
Modify category information. Only admin can modify it's information. Only name and the movies that belong to the category can be modified.
If the user is not authorized API returns a 401.

+ Request (application/json)

        {
            "name": "Action",
        }

+ Response 200 (application/json)

        {
          "success": "The request has succeeded."
        }
            
+ Response 404 (application/json)

+ Response 401 (application/json)
    
        {
          "error": "Unauthorized."
        }
        
### Delete a Category [DELETE]
Delete a category. If the category doesn't exist the API returns a 404 and if the user is not authorized it returns a 401.

 + Request (application/json)
                
 + Response 204 (application/json)

 + Response 401 (application/json)

        {
            "error":"Unauthorized."
        }
        
 + Response 404 (application/json)

## Categories [/categories]

### Get all categories [GET]

Get list of all created categories containing their data.

+ Response 200 (application/hal+json)

        {
            "_links": {
                "self": {
                  "href": "/categories"
                }
            },
            "count": 1,
            "_embedded": {
                "category": [
                    {
                        "_links": {
                            "self": {
                              "href": "/categories/1"
                            },
                            "movies": {
                              "href": "/categories/1/movies"
                            }
                        },
                        "name": "Horror"
                    }
                ]
            }
        }

### Create a new Category [POST]

You may create your own category using this action. It takes a JSON
object containing name of the category and an optional list of movies the category belongs to.

+ Request (application/json)

        {
            "name": "Horror"
        }

+ Response 201 (application/json)

        {
          "success": "The request has been fulfilled and has resulted in one or more new resources being created."
        }
            
+ Response 500 (application/json)

        {
          "error": "Item already exists."
        }
        
+ Response 401 (application/json)

        {
          "error": "Unauthorized."
        }